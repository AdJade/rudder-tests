#!/usr/bin/python

import sys
import re
import os
import scenario.lib
import importlib
from subprocess import Popen, check_output, check_call, PIPE


def env(client_path, url, token):
  os.environ['PATH'] += ":" + client_path + "/cli"
  os.environ['PYTHONPATH'] = client_path +  "/lib.python"
  print("export PATH=" + os.environ['PATH'])
  print("export PYTHONPATH=" + os.environ['PYTHONPATH'])
  os.environ['RUDDER_SERVER'] = url
  os.environ['RUDDER_TOKEN'] = token


if __name__ == "__main__":
  if len(sys.argv) != 2:
    print('Usage: ./scenar.py platform')
    exit(1)
  platform = sys.argv[1]
  port = None
  for line in open("Vagrantfile"):
    match = re.match(r'### AUTOGENERATED FOR PLATFORM ' + platform + r' \((\d+)\)', line)
    if match:
      port = str(int(match.group(1)) * 100 + 8081)
  if port is None:
    print("Can't find platform " + platform)
    exit(2)

  # True to clean tests, False to not run finally tests 
  run_finally=True
  # None for no filter, [ 'test1', 'test2' ] to run only test1 and test2
  run_only=None
  # available: progress, documentation, html, json
  frmt = "documentation"
  # Root on rudder-api-client repository
  client_path = "/home/bpeccatte/Rudder/rudder-api-client"
  # scenario to run
  run_scenario = "base"

  # test ruby binary
  rubyver = check_output("ruby --version", shell=True)
  if not re.match(r'ruby 2', rubyver):
    print("Ruby must be version 2")
    exit(3)
  # Test rspec command
  rspec = "ruby -S rspec --order defined --fail-fast --format " + frmt
  check_output(rspec, shell=True)

  # other parameters
  rudder_url = "https://localhost:" + port + "/rudder"
  server_name = platform + "_server"
  command = "vagrant ssh " + server_name + " -c 'sudo cat /root/rudder-token' 2>/dev/null"
  process = Popen(command, stdout=PIPE, shell=True)
  token, error = process.communicate()
  if(process.poll() != 0):
    raise "Couldn't access server token"
  token = token.rstrip()
  rcli = "rudder-cli --skip-verify --url=" + rudder_url + " --token=" + token

  # load and run
  scenario.lib.scenario = scenario.lib.Scenario(platform, rspec, rcli, server_name, frmt, run_only, run_finally)
  env(client_path, rudder_url, token)
  importlib.import_module("scenario." + run_scenario)

