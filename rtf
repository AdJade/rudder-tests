#!/usr/bin/python

"""
Rudder test framework

Usage:
    rtf platform list
    rtf platform status <platform>
    rtf platform setup <platform> [<version>]
    rtf platform destroy <platform>
    rtf platform update-rudder <platform> <version>
    rtf platform update-os <platform> <version>
    rtf host list <platform>
    rtf host update-rudder <host> <version>
    rtf host update-os <host> <version>
    rtf scenario list
    rtf scenario env <platform>
    rtf scenario run <platform> <scenario> [--no-finally] [--filter=<test1>,<test2>,...] [--format=<format>]
    rtf test from-rule <platform> <uuid> <test_name> [--with-scenario]

Options:
    --no-finally       Do not run tests tagged FINALLY in the scenario, to avoid coming back to initial state
    --filter=...       Only run provided test list from scenario
    --format=<format>  Output format to use (progress, documentation, html or json) [Default: documentation]
    --create-scenario    Generate a sample scenario file to use this test independantly
"""

import argparse
import json
import os
import copy
import re
import scenario.lib
import importlib
import docopt
from subprocess import check_output
from pprint import pprint
# Hack to import rudder lib, remove, some day ...
import sys
sys.path.insert(0,"./rudder-api-client/lib.python")
from rudder import RudderEndPoint, RudderError


class Host:
  """Generic Host
  Inherit to create host managed by a specific provider
  Look at Vagrant class for the list of methods to implement
  """
  def __init__(self, host_info):
    self.info = host_info


### Vagrant specific code ###

def host_lines(platform, hosts, pf_id):
  """ Return a Vagrantfile host line """ 
  pf = platform.split('.')[0]
  lines=[]
  i=1
  host_list = sorted(hosts.keys(), reverse=True)
  hostnames = " ".join(host_list)

  # detect the need for windows support
  windows_support = False
  for hostname in host_list:
    if hosts[hostname].info['system'].startswith("win"):
      windows_support = True

  # detect default server node
  server = ""
  for hostname in host_list:
    if hosts[hostname].info['rudder-setup'] == 'server':
      server = hostname

  # write a line for each host
  for hostname in host_list:
    host = hosts[hostname].info
    if host['run-with'] == 'vagrant':
      os = host['system']

      if host['rudder-setup'] == 'server':
        host_id = "0"
      else:
        host_id = str(i)
        i += 1

      # Define server the node is pointing to
      own_server = ""
      if 'server' in host:
        own_server = host['server']
      elif host['rudder-setup'] != 'server':
        own_server = server

      line = "configure(config, $" + os + ", '" + pf + "', " + str(pf_id) + ", '" + hostname +"', " + host_id
      line += ", setup:'" + host['rudder-setup'] + "', version:'" +  host['rudder-version'] + "', server:'" + own_server + "', host_list:'" + hostnames + "'"
      # windows support
      if host['rudder-setup'] == 'server' and windows_support:
        line += ", windows_plugin:true"
      line += ")\n"
      lines.append(line)
  return lines

def init_vagrantfile():
  """ Initialize an empty Vagrantfile """
  if os.path.isfile("Vagrantfile"):
    return
  with open("Vagrantfile", "w") as vagrant:
    vagrant.write("""# -*- mode: ruby -*-
# vi: set ft=ruby :

require_relative 'vagrant.rb'

Vagrant.configure("2") do |config|

### AUTOGEN TAG

end
""")


class Vagrant(Host):
  """ Vagrant managed host """
  def __init__(self, platform, name, host_info):
    Host.__init__(self, host_info)
    pf = platform.split('.')[0]
    self.platform = pf
    self.name = name
    self.hostid = pf + '_' + name
    init_vagrantfile()

  def start(self):
    """ Setup and run this host """
    os.system("vagrant up " + self.hostid)

  def stop(self):
    """ Destroy this host """
    os.system("vagrant destroy -f " + self.hostid)

  def run(self, command):
    """ Run a command as root on this host """
    value = check_output("vagrant ssh " + self.hostid + " -c \"sudo PATH=$PATH:/vagrant/scripts " + command + "\" -- -q", shell=True)
    return value .rstrip()

  def get_url(self):
    """ Get matching server URL """
    # port autodetection
    port = None
    for line in open("Vagrantfile"):
      # match configure(config, pf_name, 'platform', id, 0, 'version')
      m = re.match(r'configure\((?:.*?,){2}\s*' + "'" + self.platform + "'" + r'\s*,\s*(\d+)', line)
      if m:
        port = str(int(m.group(1)) * 100 + 8081)
    if port is None:
      return None
    return "https://localhost:" + str(port) + "/rudder"

  @staticmethod
  def status(platform, hosts):
    """ Return the status of all hosts on a given platform """
    host_list = [ platform + '_' + h for h in hosts ]
    os.system("vagrant status " + " ".join(host_list))

  @staticmethod
  def reset_platform(name, hosts):
    """ Update or replace the Vagrantfile configuration for the given platform """
    lines = []
    # parse Vagrantfile into the lines array (and update it)
    with open("Vagrantfile", "r+") as fd:
      updated = False
      line=fd.readline()
      max_pf_id = 0
      header_re = re.compile(r'### AUTOGENERATED FOR PLATFORM (\w+) \((\d+)\)')
      while line:
        # find max platform id so that we can add a new one if needed
        m = header_re.match(line)
        if m:
          pf_id = int(m.group(2))
          if pf_id > max_pf_id:
            max_pf_id = pf_id
        # look for the platform we want to modify and update its content
        if not updated and m and m.group(1) == name:
          lines.append(line) # re-add the header
          pf_id = int(m.group(2))
          while not re.match(r'### END OF AUTOGENERATION FOR ' + name, line):
            line = fd.readline()
          lines.extend(host_lines(name, hosts, pf_id))
          lines.append(line) # re-add the footer
          updated = True
        # no existing platform, create a new one
        elif not updated and re.match(r'### AUTOGEN TAG', line):
          lines.append('### AUTOGENERATED FOR PLATFORM ' + name + " (" + str(max_pf_id+1) + ") https://localhost:8" + str(max_pf_id+1) + "81/ \n")
          lines.extend(host_lines(name, hosts, max_pf_id+1))
          lines.append('### END OF AUTOGENERATION FOR ' + name + "\n")
          lines.append("\n### AUTOGEN TAG\n")
          updated = True
        # unknown line, keep it
        else:
          lines.append(line)
        line=fd.readline()
      # rewrite the file
      fd.seek(0)
      fd.truncate()
      fd.writelines(lines)

### End of vagrant specific code ###

# Global list of host type
host_types = { 'vagrant': Vagrant }



class Platform:
  """ A test platform
  Can be setup or teared down at once
  Can be used to run a test scenario
  """
  def __init__(self, name, platform_info, override):
    self.name = name
    self.hosts = {}
    # manage default values
    default = platform_info['default']
    for hostname, host in platform_info.items():
      if hostname == "default":
        continue
      host_info = copy.deepcopy(default)
      host_info.update(host)
      host_info.update(override)
      class_name = host_info['run-with']
      # New host object (Vagrant/AWS/...)
      self.hosts[hostname] = host_types[class_name](name, hostname, host_info)

  def setup(self, client_path):
    """ Startup the full platform """
    for host_type in host_types.values():
      host_type.reset_platform(self.name, self.hosts)
    for hostname in sorted(self.hosts.keys(), reverse=True):
      self.hosts[hostname].start()
    relay_list = []
    # Find all relays uuid
    for host in self.hosts.values():
      if host.info['rudder-setup'] == 'relay':
        uuid = host.run("cat /opt/rudder/etc/uuid.hive")
        relay_list.append(uuid)
    # Promote relays on servers
    if relay_list:
      for host in self.hosts.values():
        if host.info['rudder-setup'] == 'server':
          # Treat inventory received on the server
          print(host.run("/var/rudder/cfengine-community/bin/cf-agent -K"))
          # Environment setup
          rudder_url = host.get_url()
          token = host.run('cat /root/rudder-token')
          setenv(client_path, rudder_url, token)
          for relay in relay_list:
            # Accept the relay
            rcli = "rudder-cli --skip-verify --url=" + rudder_url + " --token=" + token
            command = rcli + " nodes accept "+ relay
            print(check_output(command, shell=True))
            # Promote to relay
            print(host.run("/opt/rudder/bin/rudder-node-to-relay "+relay))

  def teardown(self):
    """ Stop and destroy he full platform """
    for host in self.hosts.values():
      host.stop()

  def update_rudder(self, version):
    """ Update rudder version on all hosts """
    for host in self.hosts.values():
      print(host.run("rudder-setup upgrade-" + host.info['rudder-setup'] + " " + version))

  def status(self):
    """ Show platform status """
    for host_type in host_types.values():
      host_list = []
      for hostname,host in self.hosts.items():
        if isinstance(host, host_type):
          host_list.append(hostname)
      host_type.status(self.name, host_list)

  def api_connection_info(self):
    """ Get informations to connect to the server via the api """
    rudder_url = None
    token = None
    for hostname, host in self.hosts.items():
      if host.info['rudder-setup'] == "server":
        rudder_url = host.get_url()
        token = host.run('cat /root/rudder-token')
    if rudder_url is None or token is None:
      print("This platform has no rudder server, can't run this command")
      exit(2)
    return (rudder_url, token)


  def run_scenario(self, name, frmt, run_finally, run_only, client_path):
    """ Run a scenario on this platform """
    # test ruby binary
    rubyver = check_output("ruby --version", shell=True)
    if re.match(r'jruby', rubyver):
      if not re.match(r'jruby 1.7', rubyver):
        print("WARNING: this is not JRuby 1.7, compatibility unknown")

    elif not re.match(r'ruby 2', rubyver):
      print("ERROR: MRI Ruby needs be version 2")
      exit(3)

    # Test rspec command
    rspec = "ruby -S rspec --order defined --fail-fast --format " + frmt
    check_output(rspec, shell=True)

    # Get api command line
    (rudder_url, token) = self.api_connection_info()
    rcli = "rudder-cli --skip-verify --url=" + rudder_url + " --token=" + token

    # load and run
    scenario.lib.scenario = scenario.lib.Scenario(self, rspec, rcli, frmt, run_only, run_finally)
    setenv(client_path, rudder_url, token)
    importlib.import_module("scenario." + name)

  def print_environment(self, client_path):
    """ Print environment used to run tests on this platform """
    (rudder_url, token) = self.get_server_info()
    setenv(client_path, rudder_url, token)
    print("export PATH=" + os.environ['PATH'])
    print("export PYTHONPATH=" + os.environ['PYTHONPATH'])
    print("export RUDDER_SERVER=" + os.environ['RUDDER_SERVER'])
    print("export RUDDER_TOKEN=" + os.environ['RUDDER_TOKEN'])
    print("alias rcli='./rudder-cli --skip-verify --url=" + rudder_url + " --token=" + token + "'")

  def export_test(self, rule_uuid, test_name, scenario=False):
    """ Export a given rule, for use in a test or a scenario """
    # Retrieve data
    (rudder_url, token) = self.get_server_info()
    endpoint = RudderEndPoint(rudder_url, token, verify=False)
    rule = endpoint.rule_details(rule_uuid)['rules'][0]
    directives = []
    for directive_uuid in rule['directives']:
      directive = endpoint.directive_details(directive_uuid)['directives'][0]
      del directive['id']
      directives.append(directive)

    # create test files
    rule_file = "spec/tests/"+test_name+"_rule.rb"
    test_file = "spec/tests/"+test_name+"_test.rb"
    scenario_file = "scenario/"+test_name+".py"

    make_rule_testfile(rule_file, rule, directives)
    make_user_testfile(test_file)
    print("""
A test file to add the rule via the API has been created in %(rule_file)s
This file is where you can make change to the generated rule or directive, but it works as is.

A generic test file to test if the rule has been properly applied has been created in %(test_file)s
It contains demo code, but since we don't know what the rule does it doesn't contain code.
-> Pleas edit %(rule_file)s !

Add the test to an existing scenario:
- Add the following line before the call to wait_for_generation on all agents
    run('localhost', '%(test_name)s_rule', Err.BREAK, NAME="Test %(test_name)s", GROUP="special:all")
- Add the following line after the call to wait_for_generation
    run_on_agents('%(test_name)s_test', Err.CONTINUE)
- Add the following lines before the removal of the agent nodes
    run('localhost', 'directive_delete', Err.FINALLY, DELETE="%(directive_name)s", GROUP="special:all")
    run('localhost', 'rule_delete', Err.FINALLY, DELETE="%(rule_name)s", GROUP="special:all")
""" % { 'rule_file': rule_file, 'test_file': test_file, 'test_name': test_name, 
        'directive_name': directive['displayName'], 'rule_name': rule['displayName'] 
        } )
    if scenario:
      make_scenario_file(scenario_file, test_name)
      print("Additionnaly, a scenario has been created in " + scenario_file)


###################
# Utility methods #
###################

def setenv(client_path, url, token):
  """ Set environment variables for command calls """
  if client_path is not None:
    os.environ['PATH'] += ":" + client_path + "/cli"
    os.environ['PYTHONPATH'] = client_path +  "/lib.python"
  os.environ['RUDDER_SERVER'] = url
  os.environ['RUDDER_TOKEN'] = token

def load_json(filename):
  """ Load a commented json """
  # read json from file
  file = open(filename, 'r')
  data = file.read()
  file.close()
  data = re.sub("\\/\\/.*", "", data)
  return json.loads(data)

_platform = None
def get_platform(name, override={}):
  """ Get a platform object given its name """
  global _platform
  if _platform is not None:
    return _platform

  platform_description = load_json("platforms/" + name + ".json")
  _platform = Platform(name, platform_description, override)
  return _platform

def list_platforms():
  """ List available platforms """
  for file in os.listdir("platforms"):
    print(file.replace(".json", ""))

def list_scenarii():
  """ List available scenarios """
  for f in os.listdir("scenario"):
    if not f.endswith(".py"):
      continue
    file = f.replace(".py", "")
    if file != "__init__" and file != "lib":
      print(file)

def make_rule_testfile(filename, rule, directives):
  with open(filename, "w") as fd:
    data = """# File generated using rtf test from-rule
# This test creates a rule named '%(displayName)s' and its directive(s)
# And is checks that the api returned correctly

require 'spec_helper'

group = $params['GROUP']

directiveFile = "/tmp/directive.json"
ruleFile = "/tmp/rule.json"

describe "Add a test directive and a rule"  do
      """ % { 'displayName': rule['displayName'] }
    for idx,directive in enumerate(directives):
      data += """
  # Add directive
  describe command($rudderCli + " directive create --json=" + directiveFile + " %(technique)s %(name)s") do
    before(:all) {
      File.open(directiveFile, 'w') { |file|
        file << <<EOF
%(directive)s
EOF
      }
    }
    after(:all) {
      File.delete(directiveFile)
    }
    its(:exit_status) { should eq 0 }
    its(:stdout) { should match /^"[0-9a-f\\-]+"$/ }
    it {
      # register output uuid for next command
      $uuid%(id)i = subject.stdout.gsub(/^"|"$/, "").chomp()
    }
  end

""" % { 'technique': directive['techniqueName'], 'name': directive['displayName'], 'directive': json.dumps(directive, indent=2), 'id': idx }
    data += """
  # create a rule
  describe command($rudderCli + " rule create --json=" + ruleFile + " testRule") do
    before(:all) {
      File.open(ruleFile, 'w') { |file|
        file << <<EOF
{
  "directives": [
"""
    data += ",".join([ '"#{$uuid' + str(i) + '}"' for i in range(0, len(directives)) ])
    data += """
  ],
  "displayName": "%(displayName)s Rule",
  "longDescription": "%(longDescription)s ",
  "shortDescription": "%(shortDescription)s",
  "targets": [
    {
      "exclude": {
        "or": []
      },
      "include": {
        "or": [
          "#{group}"
        ]
      }
    }
  ]
}
EOF
      }
    }
    after(:all) {
      File.delete(ruleFile)
    }
    its(:exit_status) { should eq 0 }
    its(:stdout) { should match /^"[0-9a-f\\-]+"$/ }
    it {
      # register output uuid for next command
      $uuid = subject.stdout.gsub(/^"|"$/, "").chomp()
    }
  end

end
""" % { 'displayName': rule['displayName'], 'longDescription': rule['longDescription'], 'shortDescription': rule['shortDescription'] }
    fd.write(data)

def make_user_testfile(filename):
  with open(filename, "w") as fd:
    fd.write("""# Sample file generated using rtf test from-rule
# This is where you test your rule

require 'spec_helper'

# Please add your test here
# see http://serverspec.org/resource_types.html for a full documentation of available tests

## Ex: Test that a a package has been installed
#describe package'apache2') do
#  it { should be_installed }
#  it { should be_installed.with_version('2.4.10') }
#end

## Ex: Test that a user exist
#describe user('testuser') do
#  it { should exist }
#  it { should have_home_directory '/home/testuser' }
#end

## Ex: Test that a file exists
#describe file('/etc/passwd') do
#  it { should be_file }
#  it { should be_mode 640 }
#  it { should be_owned_by 'root' }
#  its(:content) { should match /regex to match/ }
#end

## Ex: Test the output of a command
#describe command('ls -al /') do
#  its(:stdout) { should match /bin/ }
#  its(:stderr) { should match /No such file or directory/ }
#  its(:exit_status) { should eq 0 }
#end
""")

def make_scenario_file(filename, test_name):
  with open(filename, "w") as fd:
    fd.write("""# File generated using rtf test from-rule
from scenario.lib import *

# test begins, register start time
start()

run_on_all('agent', Err.CONTINUE)

# force inventory
run_on_agents('run_agent', Err.CONTINUE, PARAMS="-D force_inventory")
run_on_servers('run_agent', Err.CONTINUE, PARAMS="")

# accept nodes
for host in scenario.agent_nodes():
  run('localhost', 'agent_accept', Err.BREAK, ACCEPT=host)

# Add a rule 
date0 = host_date('wait', Err.CONTINUE, "server")
run('localhost', '%(test_name)s_rule', Err.BREAK, NAME="Test %(test_name)s", GROUP="special:all")
for host in scenario.agent_nodes():
  wait_for_generation('wait', Err.CONTINUE, "server", date0, host, 20)

# Run agent
run_on_agents('run_agent', Err.CONTINUE, PARAMS="-f failsafe.cf")
run_on_agents('run_agent', Err.CONTINUE, PARAMS="")

# Test rule result
run_on_agents('%(test_name)s_test', Err.CONTINUE)

# remove rule/directive
run('localhost', 'directive_delete', Err.FINALLY, DELETE="Test %(test_name)s Directive", GROUP="special:all")
run('localhost', 'rule_delete', Err.FINALLY, DELETE="Test %(test_name)s Rule", GROUP="special:all")

# remove agent
for host in scenario.agent_nodes():
  run('localhost', 'agent_delete', Err.FINALLY, DELETE=host)

# test end, print summary
finish()
""" % { 'test_name': test_name } )

##########################
# Command line interface #
##########################

if __name__ == "__main__":
  args = docopt.docopt(__doc__)
  # Hack nedded because there is not api client package yet
  client_path = "rudder-api-client"
  if not os.path.exists(client_path):
    print("Can't find rudder-api-client, if you install rudder-api-client package, you should patch this script")
    print("If you want to use rudder-api-client from a local repository please type this command:")
    print("ln -s ~/<path_to>/rudder-api-client")
    exit(1)
  
  if args['platform']:
    if args['list']:
      list_platforms()
    else:
      if args['status']:
        platform = get_platform(args['<platform>'])
        platform.status()
      elif args['setup']:
        override = {}
        if args['<version>'] is not None:
          override['rudder-version'] = args['<version>']
        platform = get_platform(args['<platform>'], override)
        platform.setup(client_path)
      elif args['destroy']:
        platform = get_platform(args['<platform>'])
        platform.teardown()
      elif args['update-rudder']:
        platform = get_platform(args['<platform>'])
        platform.update_rudder(args['<version>'])
      elif args['update-os']:
        pass
  elif args['host']:
    pass
  elif args['scenario']:
    if args['list']:
      list_scenarii()
    elif args['env']:
      platform = get_platform(args['<platform>'])
      platform.print_environment(client_path)
    elif args['run']:
      filter=args['--filter']
      if filter == []:
        filter = None
      platform = get_platform(args['<platform>'])
      platform.run_scenario(args['<scenario>'], args['--format'], not args['--no-finally'], filter, client_path)
  elif args['test']:
    if args['from-rule']:
      platform = get_platform(args['<platform>'])
      platform.export_test(args['<uuid>'], args['<test_name>'], args['--create-scenario'])

