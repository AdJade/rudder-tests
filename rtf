#!/usr/bin/python


"""
Rudder test framework

Usage:
    rtf platform list
    rtf platform status <platform>
    rtf platform setup <platform> [<version>]
    rtf platform destroy <platform>
    rtf platform update-rudder <platform> <version>
    rtf platform update-os <platform> <version>
    rtf host list <platform>
    rtf host update-rudder <host> <version>
    rtf host update-os <host> <version>
    rtf scenario list
    rtf scenario run <scenario>
"""

# commands : 
#   - run <test> <platform>
#   - platform up <platform>
#   - platform destroy <platform>

import argparse
import json
import pprint
import os
import copy
import re

import docopt


# Generic Host
# Inherit to create host managed by a specific provider
# You need to implement : start, stop, get_command_line, reset_platform
# See vagrant for an example
class Host:
    def __init__(self, host_info):
        self.info = host_info

    def get_command(self, test_info):
        # fill environment variables
        env = "TEST_SYSTEM='" + self.info['system'] + "'"
        env = env + " TEST_TYPE='" + self.info['rudder-setup'] + "'"

        command_line = env + " sudo -E ./" + test_info['command']
        command_line = "cd /vagrant/commands; " + command_line
        return self.get_command_line(command_line)


# Vagrant managed host
# Manage start, stop and vagrant configuration
class Vagrant(Host):
    def __init__(self, platform, name, host_info):
        Host.__init__(self, host_info)
        pf = platform.split('.')[0]
        self.hostid = pf + '_' + name

    # find the host matching description and set it up
    def start(self):
        os.system("vagrant up " + self.hostid)

    # find the host matching description and stop it
    def stop(self):
        os.system("vagrant destroy -f " + self.hostid)

    # get the full command to run it on this host
    def get_command_line(self, command):
        return "echo '" + self.hostid + "'; vagrant ssh " + self.hostid + " -c \"" + command + "\""

    # upgrade rudder
    def upgrade_rudder(self, version):
        os.system("vagrant ssh " + self.hostid + " -c \"/vagrant/script/rudder-setup upgrade-" + self.host_info['rudder-setup'] + " " + version + "\"")

    # replace configuration for the given platform
    @staticmethod
    def reset_platform(name, hosts):
        lines = []
        with open("Vagrantfile", "r+") as fd:
            updated = False
            line=fd.readline()
            max_pf_id = 0
            while line:
                m = re.match(r'configure\((?:.*?,){3}.*?(\d+)', line)
                if m:
                    pf_id = int(m.group(1))
                    if pf_id > max_pf_id:
                        max_pf_id = pf_id
                if not updated and re.match(r'### AUTOGENERATED FOR PLATFORM ' + name + r' \(\d+\)', line):
                    lines.append(line)
                    while not re.match(r'### END OF AUTOGENERATION FOR ' + name, line):
                        line = fd.readline()
                        m = re.match(r'configure\((?:.*?,){3}.*?(\d+)', line)
                        if m:
                          pf_id = int(m.group(1))
                    lines.extend(Vagrant.host_lines(name, hosts, pf_id))
                    lines.append(line)
                    updated = True
                elif not updated and re.match(r'### AUTOGEN TAG', line):
                    lines.append('### AUTOGENERATED FOR PLATFORM ' + name + " (" + str(max_pf_id+1) + ")\n")
                    lines.extend(Vagrant.host_lines(name, hosts, max_pf_id+1))
                    lines.append('### END OF AUTOGENERATION FOR ' + name + "\n")
                    lines.append("\n### AUTOGEN TAG\n")
                    updated = True
                else:
                    lines.append(line)
                line=fd.readline()
            fd.seek(0)
            fd.truncate()
            fd.writelines(lines)

    @staticmethod
    def host_lines(platform, hosts, pf_id):
        pf = platform.split('.')[0]
        lines=[]
        i=1
        for hostname, host_obj in hosts.iteritems():
            host = host_obj.info
            if host['run-with'] == 'vagrant':
                os = host['system']
                if host['rudder-setup'] == 'server':
                    host_id = "0"
                else:
                    host_id = str(i)
                    i += 1
                line = "configure(config, " + os + ", '" + pf + "', " + str(pf_id) + ", " + host_id + ", '" + host['rudder-version'] + "')\n"
                if host['rudder-setup'] == 'server':
                    lines.insert(0, line)
                else:
                    lines.append(line)
        return lines

    @staticmethod
    def status(platform, hosts):
        host_list = [ platform + '_' + h for h in hosts ]
        os.system("vagrant status " + " ".join(host_list))


host_types = { 'vagrant': Vagrant }



# A full test platform
# Can be setup or teared down at once
# Can run a test command on the whole platform
class Platform:
    def __init__(self, name, platform_info):
        self.name = name
        self.hosts = {}
        # manage default values
        default = platform_info['default']
        for host in platform_info.keys():
            if host == "default":
                continue
            host_info = copy.deepcopy(default)
            host_info.update(platform_info[host])
            class_name = host_info['run-with']
            self.hosts[host] = host_types[class_name](name, host, host_info) # new Vagrant/AWS/... object

    # startup the full platform
    def setup(self):
        for provider in host_types:
            host_types[provider].reset_platform(self.name, self.hosts)
        for host in self.hosts.keys():
            self.hosts[host].start()

    # stop the full platform
    def teardown(self):
        for host in self.hosts.keys():
            self.hosts[host].stop()

    # update rudder version
    def update_rudder(self, version):
        for host in self.hosts.keys():
            self.hosts[host].update_rudder(version)

    # platform
    def status(self):
        for provider in host_types:
            host_list = []
            for host in self.hosts.keys():
                if isinstance(self.hosts[host], host_types[provider]):
                    host_list.append(host)
            host_types[provider].status(self.name, host_list)

    # get the full command to run the given test on its remote host
    def test_command(self, test_info):
        host = test_info['host']
        cmd = ""
        if host == "all-nodes":
            for host in self.hosts.keys():
                if re.match("agent", self.hosts[host].info['rudder-setup']):
                    cmd = cmd + self.hosts[host].get_command(test_info) + "\n"
        elif host == "all-servers":
            for host in self.hosts.keys():
                if re.match("server", self.hosts[host].info['rudder-setup']):
                    cmd = cmd + self.hosts[host].get_command(test_info) + "\n"
        elif host == "all":
            for host in self.hosts.keys():
                cmd = cmd + self.hosts[host].get_command(test_info) + "\n"
        else:
            cmd = self.hosts[host].get_command(test_info) + "\n"
        return cmd

###
### Utility methods
###

# Load a commented json
def load_json(filename):
    # read json from file
    file = open(filename, 'r')
    data = file.read()
    file.close()
    data = re.sub("\\/\\/.*", "", data)
    return json.loads(data)

# Get a platform object given it file name
_platform = None
def get_platform(name):
    global _platform
    if _platform is not None:
        return _platform

    platform_description = load_json("platforms/" + name + ".json")
    _platform = Platform(name, platform_description)
    return _platform

# list platforms
def list_platforms():
    for dir in os.listdir("platforms"):
        print(dir.replace(".json", ""))

 
############
# COMMANDS #
############

# run one scenario
def run(args):

    # extract test json
    file = open("tests/" + args.test + ".json", 'r')
    test_description = json.loads(file.read())
    file.close()

    # setup platform
#    platform_setup(args)
    platform = get_platform(args.platform)

    # write tests commands to a single script
    file = open("harness", "w")
    file.write("#!/bin/bash\n\n")
    file.write("cd commands\n\n")
    for test_item in test_description['checks']:
        file.write(platform.test_command(test_item))
    file.close()
    
    # run tests
    os.system("bash ./harness")


# MAIN, argument parser and help
if __name__ == "__main__":
  args = docopt.docopt(__doc__)
  
  if args['platform']:
    if args['list']:
      list_platforms()
    else:
      platform = get_platform(args['<platform>'])
      if args['status']:
        platform.status()
      elif args['setup']:
        platform.setup()
      elif args['destroy']:
        platform.teardown()
      elif args['update-rudder']:
        platform.update_rudder(args['<version>'])
      elif args['update-os']:
        pass
  elif args['host']:
    pass
  elif args['scenario']:
    if args['list']:
      pass
    elif args['run']:
      pass


# tester-db: {
#   infra: { type: amazon; status: installed; connect-info: {...}  } 
#   server: { type: simple; version: 2.10; linked-to: infra,amazon,..; connect-info: {...}  }
#   client: { version: 2.10; linked-to: infra,amazon,..; connect-info: {...}  }
# }

