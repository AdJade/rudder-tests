#!/bin/sh

PATH=$PATH:/var/rudder/cfengine-community/bin:/var/cfengine/bin
export PATH

# Include version-test to be able to compare Rudder version
. $(dirname "$0")/version-test.sh

# Run a technique file (or any cfengine file)
ncf_technique() {
  file="$1"
  CODE=$(cat "${file}")
  BUNDLE=$(grep "^bundle agent" "${file}" | head -n 1 | perl -pe 's/^bundle agent\s+(\w+).*/$1/')
  run
}

# Run code from stdin
ncf_code() {
  BUNDLE="main"
  header="
bundle agent main {
  methods:
"
  script=$(perl -pe 's/^(\s*)(\w+\s*\()/$1"any" usebundle => $2/')
  footer="
}
"
  CODE="${header}${script}${footer}"
  run
}

# Run a single ncf method
ncf_method() {
  method="$1"
  shift
  parameters=""
  first=1
  while [ -n "$1" ]
  do
    [ ${first} -ne 1 ] && parameters="${parameters},"
    parameters="${parameters}\"$1\""
    first=0
    shift
  done
  BUNDLE="main"
  CODE="
bundle agent main {
  methods:
    \"any\" usebundle => ${method}(${parameters});
}
"
  run
}

define_ncf_init() {
  # If we have a Rudder 3.1, we need to use standard ncf init
  if is_version_valid "${RUDDER_VERSION}" "3.1"
  then
    NCF_VERSION="0.x"
  fi
  # If we have a Rudder 3.2 or 4.0, we need to use ncf of version 1
  if is_version_valid "${RUDDER_VERSION}" "[3.2 4.0]"
  then
    NCF_VERSION="1.0"
  fi

  # If we have a Rudder 4.0 or more, we need to use ncf of version master
  if is_version_valid "${RUDDER_VERSION}" "[4.1 *]"
  then
    NCF_VERSION="master"
  fi

  # If no version is detected, we fallback to the LTS version
  if [ -z "${NCF_VERSION}" ]
  then
    NCF_VERSION="0.x"
  fi


  if [ "${NCF_VERSION}" = "0.x" ]
  then
    NCF_INIT='
bundle common inputs
{
  vars:
      "framework_path"          string => "/var/rudder/ncf/common";
      "local_path"              string => "/var/rudder/ncf/local";
      "list_compatible_inputs"  string => "NCF_CACHE_PATH=/tmp /bin/sh ${framework_path}/10_ncf_internals/list-compatible-inputs";

      "ncf_internals"           string => execresult("${list_compatible_inputs} ${sys.cf_version} ${framework_path} 10_ncf_internals", "useshell");
      "cfe_basics"              string => execresult("${list_compatible_inputs} ${sys.cf_version} ${framework_path} 20_cfe_basics", "useshell");
      "generic_methods"         string => execresult("${list_compatible_inputs} ${sys.cf_version} ${framework_path} 30_generic_methods", "useshell");
      "it_ops_knowledge"        string => execresult("${list_compatible_inputs} ${sys.cf_version} ${framework_path} 40_it_ops_knowledge", "useshell");

      "local_generic_methods"   string => execresult("${list_compatible_inputs} ${sys.cf_version} ${local_path} 30_generic_methods", "useshell");
      "local_it_ops_knowledge"  string => execresult("${list_compatible_inputs} ${sys.cf_version} ${local_path} 40_it_ops_knowledge", "useshell");

      "ncf_internals_files"          slist => splitstring("${ncf_internals}", "\n", 10000);
      "cfe_basics_files"             slist => splitstring("${cfe_basics}", "\n", 10000);
      "generic_methods_files"        slist => splitstring("${generic_methods}", "\n", 10000);
      "it_ops_knowledge_files"       slist => splitstring("${it_ops_knowledge}", "\n", 10000);
      "local_generic_methods_files"  slist => splitstring("${local_generic_methods}", "\n", 10000);
      "local_it_ops_knowledge_files" slist => splitstring("${local_it_ops_knowledge}", "\n", 10000);
}

bundle agent postconf {
  vars:
    any::
      "configuration.enabled_loggers" string => "_log_default";
}

body common control
{
    inputs => {
               @(inputs.ncf_internals_files),
               @(inputs.cfe_basics_files),
               @(inputs.generic_methods_files),
               @(inputs.it_ops_knowledge_files),
               @(inputs.local_generic_methods_files),
               @(inputs.local_it_ops_knowledge_files)
              };

    bundlesequence => { 
      "configuration",
      "postconf",
'
  elif [ "${NCF_VERSION}" = "1.0" ] || [ "${NCF_VERSION}" = "master" ]
  then
    NCF_INIT='
bundle common inputs
{
  vars:
    !enterprise_edition::
      "capability_option"      string => "--capability-file /opt/rudder/etc/agent-capabilities";
    enterprise_edition::
      "capability_option"      string => "";
   any::

      "ncf_path"                string => "/var/rudder/ncf";
      "list_compatible_inputs"  string => "NCF_CACHE_PATH=/tmp /bin/sh ${ncf_path}/common/10_ncf_internals/list-compatible-inputs";
      "compatible_inputs_cmd"   string => "${list_compatible_inputs} ${capability_option} --agent-version ${sys.cf_version} --ncf-path ''${ncf_path}''";
      "shell_type"              string => "useshell";

    any::
      "path_ncf_common_inputs_10" slist => splitstring(execresult("${compatible_inputs_cmd} common/10_ncf_internals", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_20" slist => splitstring(execresult("${compatible_inputs_cmd} common/20_cfe_basics", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_30" slist => splitstring(execresult("${compatible_inputs_cmd} common/30_generic_methods", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_40" slist => splitstring(execresult("${compatible_inputs_cmd} common/40_it_ops_knowledge", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_50" slist => splitstring(execresult("${compatible_inputs_cmd} common/50_techniques", "${shell_type}"), "\n", 10000);
      "path_ncf_common_inputs_60" slist => splitstring(execresult("${compatible_inputs_cmd} common/60_services", "${shell_type}"), "\n", 10000);

      "path_ncf_local_inputs_10" slist => splitstring(execresult("${compatible_inputs_cmd} local/10_ncf_internals", "${shell_type}"), "\n", 10000);
      "path_ncf_local_inputs_20" slist => splitstring(execresult("${compatible_inputs_cmd} local/20_cfe_basics", "${shell_type}"), "\n", 10000);
      "path_ncf_local_inputs_30" slist => splitstring(execresult("${compatible_inputs_cmd} local/30_generic_methods", "${shell_type}"), "\n", 10000);
      "path_ncf_local_inputs_40" slist => splitstring(execresult("${compatible_inputs_cmd} local/40_it_ops_knowledge", "${shell_type}"), "\n", 10000);
      # Files from 50_techniques are automatically included by Rudder s metadata.xml mechanism
      "path_ncf_local_inputs_60" slist => splitstring(execresult("${compatible_inputs_cmd} local/60_services", "${shell_type}"), "\n", 10000);
      # Must concatenate all lists + filter, as maplist on an empty element returns cf_null
      "raw_path_ncf_inputs" slist => { @{path_ncf_common_inputs_10}, @{path_ncf_local_inputs_10}, @{path_ncf_common_inputs_20}, @{path_ncf_local_inputs_20}, @{path_ncf_common_inputs_30}, @{path_ncf_local_inputs_30}, @{path_ncf_common_inputs_40}, @{path_ncf_local_inputs_40}, @{path_ncf_common_inputs_50}, @{path_ncf_common_inputs_60}, @{path_ncf_local_inputs_60}},
                           policy => "ifdefined";

       "raw_ncf_inputs"     slist => maplist("${ncf_path}/${this}", @{raw_path_ncf_inputs});
       # Need to remove cf_null from the list
       "ncf_inputs"         slist => filter("${ncf_path}/cf_null", "raw_ncf_inputs", "false", "true", 10000);

      # all other inputs are loaded by body file control in rudder-system-directives.cf and rudder-directives.cf
      "inputs_list" slist => { @{ncf_inputs} };


}

bundle agent postconf {
  vars:
    any::
      "configuration.enabled_loggers" string => "_log_default";
}

body common control
{
    inputs => {
               @(inputs.inputs_list),
              };

    bundlesequence => { 
      "configuration",
      "postconf",

'
  fi
}

# Run the buncle $BUNDLE from cfengine source $CODE
# If RUDDER_VERSION is specified, use a specific ncf initialization file
run() {
  define_ncf_init

  FILE=$(mktemp)
  echo "${NCF_INIT}" > "${FILE}"
  echo "      \"${BUNDLE}\"" >> "${FILE}"
  cat >> "${FILE}" <<'EOF'
    };
}

EOF
  echo "${CODE}" >> "${FILE}"
  cf-agent -f "${FILE}" -KIC
  code=$?
  [ ${code} -eq 0 ] && rm -f "${FILE}"
  exit ${code}
}

# MAIN
# Simple but enough at the moment
# Check if a server_version is defined
if [ "$1" = "-V" ]
then
  RUDDER_VERSION="$2"
  shift
  shift
fi

# Default value for RUDDER_VERSION if not defined
if [ -z "${RUDDER_VERSION}" ]
then
  RUDDER_VERSION="3.1"
fi

# Parse actual arguments
if [ "$1" = "-f" ]
then
  ncf_technique "$2"
elif [ "$1" = "-i" ]
then
  ncf_code
else
  ncf_method "$@"
fi
